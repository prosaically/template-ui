/**
 * Copyright (c) Egu365 Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.egu365.com/
 *
 * Version: 5.10.3 (2022-03-31)
 */

"use strict";
function multiplot(i18n) {
    // UUID Generator
    var uuid = function () {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
            var r = (Math.random() * 16) | 0;
            var v = c === "x" ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
    };

    // Parsing tool
    var parseQuery = function () {
        var items = window.location.search.substring(1).split("&");
        var query = {};
        for (var l = 0; l < items.length; l++) {
            var kv = items[l].split("=");
            var key = kv[0];
            var val = kv[1];
            query[key] = decodeURIComponent(val || "");
        }
        return query;
    };

    // Picker Generator
    var pickerGenerator = function () {
        var imagesFileTypes = editor.getParam("images_file_types", "*", "string");
        var imagesFileTypeArr = imagesFileTypes.split(/, ?/gi);
        for (var t = 0; t < imagesFileTypeArr.length; t++) {
            imagesFileTypeArr[t] = "image/" + imagesFileTypeArr[t];
        }
        var accept = imagesFileTypeArr.join(", ");

        var input = document.createElement("input");
        input.type = "file";
        input.multiple = true;
        input.accept = accept;
        input.setAttribute("style", "width: 0; height: 0; overflow: hidden;");

        document.body.insertAdjacentElement("beforeend", input);
        return input;
    };

    // Read parent layer
    var id = parseQuery().id || "";
    var paternal = window.parent[id];

    // Non editor
    if (paternal === null || paternal === undefined) {
        return;
    }

    // initialization
    var queue = [];
    var tinymce = paternal.tinymce;
    var editor = paternal.editor;
    var dialog = paternal.dialog;
    var picker = pickerGenerator();
    var body = document.querySelector(".multiplot-body");

    // blobInfo handle
    var blobInfoHandler = function (file) {
        var infoObject = {
            id: uuid().replace(/-/gi, ""),
            name: file.name.replace(/\.[a-zA-Z0-9]+$/gi, ""),
            filename: file.name,
            blob: file,
            base64: undefined,
            blobUri: window.URL.createObjectURL(file),
            uri: undefined
        };

        var reader = new FileReader();
        reader.onload = () => {
            infoObject.base64 = reader.result;
        };
        reader.readAsDataURL(file);

        return infoObject;
    };

    // Result processing
    var resultHandler = function (response) {
        // Queue to map
        var mapper = {};
        for (var q = 0; q < queue.length; q++) {
            var queueElement = queue[q];
            mapper[queueElement.blobInfo.id] = queueElement;
        }
        // Result writeback
        var results = response || [];
        for (var j = 0; j < results.length; j++) {
            var result = results[j];
            var id = result.blobInfo.id();
            var mapperElement = mapper[id];

            if (result.status) {
                mapperElement.blobInfo.uri = result.url;
                mapperElement.element.dataset.state = "2";
            } else {
                mapperElement.element.dataset.state = "-1";
            }
        }
    };

    // Select callback
    picker.addEventListener(
        "change",
        function () {
            var files = picker.files;

            // No pictures
            if (files.length < 1) {
                return;
            }

            // Clear history
            body.innerHTML = "";
            queue = [];

            // Picture echo
            for (var o = 0; o < files.length; o++) {
                var blobInfo = blobInfoHandler(files[o]);

                var element = document.createElement("div");
                element.dataset.state = "0";
                element.title = blobInfo.filename;
                element.className = "multiplot-body-item";
                element.setAttribute("style", 'background-image: url("' + blobInfo.blobUri + '")');
                body.insertAdjacentElement("beforeend", element);

                queue.push({blobInfo: blobInfo, element: element});
            }
        },
        true
    );

    // Select Picture
    document.querySelector(".multiplot-form-choose").addEventListener(
        "click",
        function () {
            // Queue is empty
            if (queue.length < 1) {
                return picker.click();
            }
            // Queue has value
            tinymce.activeEditor.windowManager.confirm(i18n.choose_confirm, function (again) {
                if (again) {
                    picker.click();
                }
            });
        },
        true
    );

    // Upload pictures
    document.querySelector(".multiplot-form-upload").addEventListener(
        "click",
        function () {
            var blobInfos = [];
            for (var i = 0; i < queue.length; i++) {
                var state = queue[i].element.dataset.state;
                if (state === "0" || state === "-1") {
                    var blobInfo = editor.editorUpload.blobCache.create(queue[i].blobInfo);
                    queue[i].element.dataset.state = "1";
                    blobInfos.push(blobInfo);
                }
            }
            // empty prompt
            if (blobInfos.length < 1) {
                return editor.windowManager.alert(i18n.upload_alert);
            }
            // upload image
            dialog.block(i18n.upload_block);
            tinymce.util
                .ImageUploader(editor)
                .upload(blobInfos, true)
                .then(resultHandler)
                .catch(function () {})
                .finally(function () {
                    dialog.unblock();
                });
        },
        true
    );

    // Insert picture
    document.querySelector(".multiplot-form-insert").addEventListener(
        "click",
        function () {
            var inserts = [];
            for (var s = 0; s < queue.length; s++) {
                if (queue[s].element.dataset.state === "2") {
                    inserts.push('<img src="' + queue[s].blobInfo.uri + '" alt="' + queue[s].blobInfo.filename + '">');
                }
            }
            if (inserts.length < 1) {
                return editor.windowManager.alert(i18n.insert_alert);
            }
            var images = inserts.join("\n");
            editor.insertContent(images);
            dialog.close();
        },
        true
    );
}
